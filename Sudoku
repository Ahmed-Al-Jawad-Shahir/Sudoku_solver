
from pprint import pprint


def find_next_empty(puzzle):
    # finds the next row, col on the puzzle that's not filled yet --> rep with 0
    # return row, col tuple (or (None, None) if there is none)

    # keep in mind that we are using 0-8 for our indices
    for r in range(9):
        for c in range(9): # range(9) is 0, 1, 2, ... 8
            if puzzle[r][c] == 0:
                puzzle[r][c] ==0
                return r, c

    return None, None  # if no spaces in the puzzle are empty (0)

def is_valid(puzzle, guess, row, col):
    # figures out whether the guess at the row/col is a valid 
    # for a valid guess number must not be repeated in the row, column, or 3x3 square that it appears in

    # Check of the guess is in the same row
    row_vals = puzzle[row]
    if guess in row_vals:
        return False 

    # heck of the guess is in the same column
    col_vals = []
    for i in range(9):
        col_vals.append(puzzle[i][col])
    if guess in col_vals:
        return False

    # heck of the guess is in it's 3x3 square
    row_start = (row // 3) * 3 # 10 // 3 = 3, 5 // 3 = 1, 1 // 3 = 0
    col_start = (col // 3) * 3

    for r in range(row_start, row_start + 3):
        for c in range(col_start, col_start + 3):
            if puzzle[r][c] == guess:
                return False

    return True

def solve_sudoku(puzzle):
    
    # the sudoku is a list of lists
    
    # find the next empty to make a guesses about
    row, col = find_next_empty(puzzle)

    # if no empty cell remaining return the true meaning the suduko is solved
    if row is None:  
        return True 
    
    # making a guess between 1 and 9
    for guess in range(1, 10): 
        #  check if this is a valid guess
        if is_valid(puzzle, guess, row, col):
            #change value if valid
            puzzle[row][col] = guess
            # recursively solve 
            if solve_sudoku(puzzle):
                return True
        
    # if guess fails backtrack and try a new number
        puzzle[row][col] = 0

    # if none of the numbers work, then this puzzle is not solveable
    return False

if __name__ == '__main__':
    original_board = [
        [0, 1, 0,   0, 4, 0,   0, 5, 0],
        [8, 0, 0,   0, 0, 5,   0, 0, 9],
        [0, 0, 0,   6, 0, 3,   0, 0, 0],

        [0, 4, 9,   0, 0, 0,   7, 0, 0],
        [2, 0, 0,   0, 0, 0,   0, 0, 6],
        [0, 0, 8,   0, 0, 0,   1, 9, 0],

        [0, 0, 0,   4, 0, 6,   0, 0, 0],
        [3, 0, 0,   9, 0, 0,   0, 0, 5],
        [0, 5, 0,   0, 7, 0,   0, 8, 0]
    ]


    new_board= original_board;
    print(solve_sudoku(new_board))
    pprint(new_board)
    